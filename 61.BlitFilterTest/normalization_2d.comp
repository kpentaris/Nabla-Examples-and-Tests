#version 460 core

#ifndef _NBL_GLSL_WORKGROUP_SIZE_X_
#define _NBL_GLSL_WORKGROUP_SIZE_X_ 16
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_Y_
#define _NBL_GLSL_WORKGROUP_SIZE_Y_ 16
#endif

#define _NBL_GLSL_WORKGROUP_SIZE_ (_NBL_GLSL_WORKGROUP_SIZE_X_ * _NBL_GLSL_WORKGROUP_SIZE_Y_)

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_X_, local_size_y = _NBL_GLSL_WORKGROUP_SIZE_Y_) in;

#include <../normalization/parameters.glsl>
#include <../normalization/normalization.glsl>
#include <../normalization/descriptors.glsl>

layout (set = 0, binding = 0, rgba16f) uniform image2D inImage;

layout (push_constant) uniform Block
{
	nbl_glsl_blit_normalization_parameters_t params;
} pc;

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PARAMETERS_DEFINED_
nbl_glsl_blit_normalization_parameters_t nbl_glsl_blit_normalization_getParameters()
{
	return pc.params;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PARAMETERS_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PADDED_DATA_DEFINED_
vec4 nbl_glsl_blit_normalization_getPaddedData(in uvec3 coord)
{
	const nbl_glsl_blit_normalization_parameters_t params = nbl_glsl_blit_normalization_getParameters();

	vec4 data = vec4(0.f);
	if (all(lessThan(coord.xy, params.outImageDim.xy)))
		data = imageLoad(inImage, ivec2(coord));

	return data;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PADDED_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_
#define _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_
void nbl_glsl_blit_normalization_setData(in uvec3 coord, in vec4 data)
{
	const nbl_glsl_blit_normalization_parameters_t params = nbl_glsl_blit_normalization_getParameters();

	if (all(lessThan(coord.xy, params.outImageDim.xy)))
		imageStore(inImage, ivec2(coord), data);
}
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_
uint nbl_glsl_blit_normalization_getAlphaHistogramData(in uint index)
{
	return alphaHistogram.data[index];
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_
uint nbl_glsl_blit_normalization_getPassedInputPixelCountData()
{
	return passedInputPixelCount.data;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_normalization_main();
}
