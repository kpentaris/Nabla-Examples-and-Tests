#version 460 core

#ifndef _NBL_GLSL_WORKGROUP_SIZE_X_
#define _NBL_GLSL_WORKGROUP_SIZE_X_ 16
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_Y_
#define _NBL_GLSL_WORKGROUP_SIZE_Y_ 16
#endif

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_X_, local_size_y = _NBL_GLSL_WORKGROUP_SIZE_Y_) in;

#include <../alpha_test/parameters.glsl>
#include <../alpha_test/descriptors.glsl>
#include <../alpha_test/alpha_test.glsl>

layout (push_constant) uniform Block
{
	nbl_glsl_blit_alpha_test_parameters_t params;
} pc;

#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_GET_PARAMETERS_DEFINED_
nbl_glsl_blit_alpha_test_parameters_t nbl_glsl_blit_alpha_test_getParameters()
{
	return pc.params;
}
#define _NBL_GLSL_BLIT_ALPHA_TEST_GET_PARAMETERS_DEFINED_
#endif

layout (set = 0, binding = 0) uniform sampler2D inImage;

#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_GET_PADDED_DATA_DEFINED_
float nbl_glsl_blit_alpha_test_getPaddedData(in uvec3 texCoords)
{
	const uvec2 textureDim = uvec2(textureSize(inImage, 0));
	float alpha = 0.f;
	if (all(lessThan(gl_GlobalInvocationID.xy, textureDim)))
		alpha = texelFetch(inImage, ivec2(gl_GlobalInvocationID.xy), 0).a;

	return alpha;
}
#define _NBL_GLSL_BLIT_ALPHA_TEST_GET_PADDED_DATA_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_alpha_test_main();
}

