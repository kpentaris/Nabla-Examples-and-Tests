#version 460 core

#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
#endif

#ifndef nbl_glsl_blit_input_pixel_t
#define nbl_glsl_blit_input_pixel_t float
#endif

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

shared nbl_glsl_blit_input_pixel_t nbl_glsl_blit_scratchShared[4096];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ nbl_glsl_blit_scratchShared

#include <../blit/parameters.glsl>
#include <../blit/descriptors.glsl>
#include <../blit/blit.glsl>

layout(push_constant) uniform Block
{
	nbl_glsl_blit_parameters_t params;
} pc;

#ifndef _NBL_GLSL_BLIT_GET_PARAMETERS_DEFINED_
nbl_glsl_blit_parameters_t nbl_glsl_blit_getParameters()
{
	return pc.params;
}
#define _NBL_GLSL_BLIT_GET_PARAMETERS_DEFINED_
#endif

layout (set = 0, binding = 0) uniform sampler1D inImage;
layout (set = 0, binding = 1, r32f) uniform writeonly image1D outImage;

#ifndef _NBL_GLSL_BLIT_GET_DATA_DEFINED_
vec4 nbl_glsl_blit_getData(in ivec3 coord)
{
	return texelFetch(inImage, coord.x, 0);
}
#define _NBL_GLSL_BLIT_GET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_SET_DATA_DEFINED_
void nbl_glsl_blit_setData(in uvec3 coord, in vec4 data)
{
	imageStore(outImage, int(coord.x), data);
}
#define _NBL_GLSL_BLIT_SET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_
float nbl_glsl_blit_getCachedWeightsPremultiplied(in uvec3 lutCoord)
{
	const vec3 weight = vec3(weights.data[lutCoord.x], weights.data[lutCoord.y], weights.data[lutCoord.z]);
	return weight.x;
}
#define _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
void nbl_glsl_blit_addToHistogram(in uint bucketIndex)
{
	// atomicAdd(alphaHistogram.data[bucketIndex], 1u);
}
#define _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_main();
}